#include <stdio.h>
#include <string.h>
#define MAX_MNT 10
#define MAX_MDT 100
#define MAX_APT 10
#define MAX_INPUT 100

// Structures for MNT, MDT, and APTAB
struct MNT {
    char macro_name[20];
    int mdt_index;
} mnt[MAX_MNT];

struct MDT {
    char definition[100];
} mdt[MAX_MDT];

struct APTAB {
    char actual_param[10][20];
} aptab;

int mnt_count = 0, mdt_count = 0, aptab_count = 0;

// Function to add a macro to MNT
void add_macro_to_mnt(char *macro_name, int mdt_index) {
    strcpy(mnt[mnt_count].macro_name, macro_name);
    mnt[mnt_count].mdt_index = mdt_index;
    mnt_count++;
}

// Function to add macro definition to MDT
void add_definition_to_mdt(char *def) {
    strcpy(mdt[mdt_count].definition, def);
    mdt_count++;
}

// Function to display MNT
void display_mnt() {
    printf("\nMacro Name Table (MNT):\n");
    printf("------------------------\n");
    printf("Macro Name\tMDT Index\n");
    printf("------------------------\n");
    for (int i = 0; i < mnt_count; i++) {
        printf("%s\t\t%d\n", mnt[i].macro_name, mnt[i].mdt_index);
    }
}

// Function to display MDT
void display_mdt() {
    printf("\nMacro Definition Table (MDT):\n");
    printf("------------------------------\n");
    printf("Index\tDefinition\n");
    printf("------------------------------\n");
    for (int i = 0; i < mdt_count; i++) {
        printf("%d\t%s\n", i, mdt[i].definition);
    }
}

// Function to display APTAB
void display_aptab() {
    printf("\nActual Parameter Table (APTAB):\n");
    printf("-------------------------------\n");
    printf("Index\tParameter\n");
    printf("-------------------------------\n");
    for (int i = 0; i < aptab_count; i++) {
        printf("P%d\t%s\n", i + 1, aptab.actual_param[i]);
    }
}

// Function to process macro call
void process_macro_call(char *macro_name, char params[][20], int param_count) {
    // Find the macro in MNT
    int mnt_index = -1;
    for (int i = 0; i < mnt_count; i++) {
        if (strcmp(mnt[i].macro_name, macro_name) == 0) {
            mnt_index = i;
            break;
        }
    }
    if (mnt_index == -1) {
        printf("Macro not found!\n");
        return;
    }

    // Populate APTAB with actual parameters
    aptab_count = param_count;
    for (int i = 0; i < param_count; i++) {
        strcpy(aptab.actual_param[i], params[i]);
    }

    // Expand the macro
    printf("\nExpanded Code for %s:\n", macro_name);
    printf("--------------------\n");
    for (int i = mnt[mnt_index].mdt_index; i < mdt_count; i++) {
        char expanded_line[100];
        strcpy(expanded_line, mdt[i].definition);

        // Replace formal parameters with actual parameters
        for (int j = 0; j < aptab_count; j++) {
            char param_placeholder[3];
            sprintf(param_placeholder, "#%d", j + 1);
            char *pos = strstr(expanded_line, param_placeholder);
            if (pos != NULL) {
                strncpy(pos, aptab.actual_param[j], strlen(aptab.actual_param[j]));
            }
        }

        if (strcmp(expanded_line, "MEND") == 0) break;

        printf("%s\n", expanded_line);
    }

    // Display APTAB
    display_aptab();
}

int main() {
    char input[3][20] = {"MACRO1", "MACRO2", "MACRO3"};
    char params1[2][20] = {"R1", "R2"};
    char params2[2][20] = {"R3", "R4"};
    char params3[1][20] = {"R5"};

    // Preload MNT and MDT for this example
    add_macro_to_mnt("MACRO1", 0);
    add_definition_to_mdt("MOV #1, A");
    add_definition_to_mdt("ADD #2, B");
    add_definition_to_mdt("MEND");

    add_macro_to_mnt("MACRO2", 3);
    add_definition_to_mdt("SUB #1, C");
    add_definition_to_mdt("MUL #2, D");
    add_definition_to_mdt("MEND");

    add_macro_to_mnt("MACRO3", 6);
    add_definition_to_mdt("DIV #1, E");
    add_definition_to_mdt("MEND");

    // Display MNT and MDT
    display_mnt();
    display_mdt();

    // Simulate input with multiple macro calls
    // Process macro calls
    printf("\nProcessing MACRO1:\n");
    process_macro_call(input[0], params1, 2);

    printf("\nProcessing MACRO2:\n");
    process_macro_call(input[1], params2, 2);

    printf("\nProcessing MACRO3:\n");
    process_macro_call(input[2], params3, 1);

    return 0;
}
